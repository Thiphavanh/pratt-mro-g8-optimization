set define off
declare
v_folder_id varchar2(40) :='FOUNDATION';
v_sql_id varchar2(85) :='UTASGI_WIDSCOPE';
v_sql_id_displ varchar2(85) :='UTASGI_WidScope';
v_read_only number :='';
v_datasource varchar2(32) :='';
v_stype varchar2(32) :='SFWID';
v_site varchar2(10) :='HAMSI';
v_description varchar2(200) :='';
v_sql_text varchar2(4000) :='SELECT
MRO_FLAG, ORDER_NO, ORDER_ID, OPER_NO, OPER_KEY, STEP_NO, STEP_KEY, LOW_NAV_LVL , PART_NO, PART_CHG, ITEM_TYPE, ITEM_SUBTYPE, PROGRAM, PARENT_ORDER_ID, ORIG_ORDER_ID, ALT_ID,
ALTERATION_LEVEL, ORDER_STATUS, ALT_STATUS, PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, OPER_UPDT_NO, STEP_UPDT_NO, DISC_ID, DISC_LINE_NO, CA_ID, NODE_ID, CA_RESOLN_ID,
CA_REQUEST_ID, ORDER_CONTROL_TYPE, EXTERNAL_PLM_NO, EXTERNAL_ERP_NO, ORDER_QTY,MFG_BOM_CHG, BOM_NO,POSITION_FLAG,SECURITY_GROUP, SERIAL_FLAG, LOT_FLAG,FAI_OPER_REQD, PRT_ALRT, LST_OBJ_ALRT,
HOLD_ALRT,DISC_ALRT,COMM_ALRT,SER_ALRT,ALT_PRT_ALRT,DI_FLAG,NOTES_LED_STATUS,SEC_FLAG, DISPLAY_SEQUENCE, INSTRUCTIONS_TYPE, ORDER_TYPE, STDOPER_OBJECT_ID, UCF_ORDER_OPER_FLAG1, OPER_STATUS, ASGND_WORK_LOC, ALT_TAB_ALRT,UCF_PLAN_FLAG4
FROM (
SELECT
CASE WHEN D.INSTRUCTIONS_TYPE like ''MRO%'' THEN ''Y'' ELSE ''N'' END AS MRO_FLAG, V.ORDER_NO, V.ORDER_ID, V.OPER_NO, V.OPER_KEY,
(CASE WHEN V.STEP_NO IS NULL THEN (CASE WHEN TEXT_TYPE=''PLANNING'' THEN ''FOOTER'' ELSE ''HEADER'' END) ELSE V.STEP_NO END) AS STEP_NO,
V.STEP_KEY, V.LOW_NAV_LVL, V.PART_NO, V.PART_CHG,
V.ITEM_TYPE, V.ITEM_SUBTYPE, V.PROGRAM, V.PARENT_ORDER_ID, V.ORIG_ORDER_ID, V.ALT_ID, SFWID_ALTERATION_TYPE_GET(V.ORDER_ID) AS ALTERATION_LEVEL, V.ORDER_STATUS, V.ALT_STATUS,
V.PLAN_ID, V.PLAN_VERSION, V.PLAN_REVISION, V.PLAN_ALTERATIONS, V.OPER_UPDT_NO, V.STEP_UPDT_NO, V.DISC_ID, V.DISC_LINE_NO, V.CA_ID, V.NODE_ID, V.CA_RESOLN_ID, V.CA_REQUEST_ID,
SFWID_ORDER_CONTROL(V.ORDER_ID) AS ORDER_CONTROL_TYPE, V.ORDER_EXTERNAL_PLM_NO AS EXTERNAL_PLM_NO, V.ORDER_EXTERNAL_ERP_NO AS EXTERNAL_ERP_NO, V.ORDER_QTY,
V.MFG_BOM_CHG, V.BOM_NO, CASE WHEN POSITION_FLAG IS NULL THEN ''N'' ELSE POSITION_FLAG END AS POSITION_FLAG, V.SECURITY_GROUP, V.SERIAL_FLAG, V.LOT_FLAG,
V.OPER_STATUS, V.SEQ_STEPS_FLAG, V.EXE_ORDER,FAI_OPER_REQD
,PRT_ALRT,LST_OBJ_ALRT,HOLD_ALRT,DISC_ALRT,COMM_ALRT,SER_ALRT,ALT_PRT_ALRT,DI_FLAG,NOTES_LED_STATUS,SEC_FLAG, DISPLAY_SEQUENCE, D.INSTRUCTIONS_TYPE, V.ORDER_TYPE, OPER.STDOPER_OBJECT_ID, OPER.UCF_ORDER_OPER_FLAG1,
CASE WHEN OPER_ASGND_WORK_LOC IS NOT NULL THEN OPER_ASGND_WORK_LOC ELSE ORDER_ASGND_WORK_LOC END AS ASGND_WORK_LOC, UCF_ORDER_VCH6, C.ALT_TAB_ALRT,UCF_PLAN_FLAG4
FROM UTASGI_SFWID_SCOPE_V V, SFWID_OPER_DESC OPER,
table(SFMFG.UTASGI_WID_ALERT_INFO_TAB_GET(:ORDER_ID)) C,
(SELECT DISTINCT INSTRUCTIONS_TYPE,UCF_PLAN_FLAG4 FROM SFFND_DOC_TYPE_DEF T, SFWID_ORDER_DESC U WHERE U.ORDER_ID = :ORDER_ID AND U.DOC_TYPE = T.DOC_TYPE AND U.ORDER_TYPE = T.DOC_SUB_TYPE ) D
WHERE V.ORDER_ID = OPER.ORDER_ID
AND V.OPER_KEY = OPER.OPER_KEY
AND OPER.STEP_KEY = -1
AND V.ORDER_ID = :ORDER_ID
AND
((D.INSTRUCTIONS_TYPE like ''MRO%'' AND OPER.INCLUDED=''INCLUDED'') OR D.INSTRUCTIONS_TYPE not like ''MRO%'')
) VV
WHERE 1=1 /*+ @Filter */
ORDER BY VV.ORDER_ID, CASE VV.OPER_STATUS WHEN ''ACTIVE'' THEN 1 WHEN ''IN QUEUE'' THEN 2 WHEN ''PENDING'' THEN 3 WHEN ''EXCLUDE'' THEN 4 WHEN ''CLOSE'' THEN 5 ELSE 6 END,
 SFDB_LPAD_VARCHAR(VV.OPER_NO, 10, ''0''), (CASE WHEN VV.SEQ_STEPS_FLAG = ''Y'' AND VV.STEP_NO != ''FOOTER'' THEN VV.EXE_ORDER END),
 CASE VV.STEP_NO WHEN ''HEADER'' THEN '' '' WHEN ''FOOTER'' THEN CHR(''254'') ELSE SFDB_LPAD_VARCHAR(nvl(VV.STEP_NO,-99999999), 10, ''0'') END';
begin
begin
insert into sfcore_sql_lib(sql_id,sql_id_displ,updt_userid,time_stamp,read_only,datasource,stype, description,sql_text)
    values(v_sql_id,v_sql_id_displ,user,sysdate,v_read_only,v_datasource,v_stype, v_description,replace(v_sql_text,chr(10),chr(13)||chr(10)));
commit;
exception when dup_val_on_index then
  update sfcore_sql_lib
  set sql_text=replace(v_sql_text,chr(10),chr(13)||chr(10)),updt_userid=user,time_stamp=sysdate,
read_only=v_read_only,datasource=v_datasource,stype=v_stype,  
description=v_description
  where sql_id=v_sql_id;
  commit;
end;
begin
if v_folder_id is not null then
insert into sfcore_sql_lib_folder(sql_id,folder_id,updt_userid,time_stamp)
values(v_sql_id,v_folder_id,user,sysdate);
commit;
end if;
exception when others then null;
end;
end;
/

set define on

