
set define off
prompt ---------------------------------------;
prompt Executing ... PWUST_PLANNINGSCOPE.sql
prompt ---------------------------------------;
declare
v_folder_id sfcore_sql_lib_folder.folder_id%type  :='PWUST_550FF0D87F6141A0E05387971F0AD3EA';
v_sql_id sfcore_sql_lib.sql_id%type :='PWUST_PLANNINGSCOPE';
v_sql_id_displ sfcore_sql_lib.sql_id_displ%type  :='PWUST_PlanningScope';
v_read_only sfcore_sql_lib.read_only%type  :='';
v_datasource sfcore_sql_lib.datasource%type  :='';
v_stype sfcore_sql_lib.stype%type  :='SFPL';
v_description sfcore_sql_lib.description%type  :='SRMO_EXPT_201';
v_sql_text sfcore_sql_lib.sql_text%type  :='SELECT BOM_ID,MRO_FLAG, INSTRUCTIONS_TYPE, PART_NO, OPER_NO, STEP_NO, LOW_NAV_LVL, PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, PART_CHG, ITEM_TYPE, ITEM_SUBTYPE, PROGRAM,PLND_PROGRAM ,
OPER_KEY, STEP_KEY, PLAN_UPDT_NO, OPER_UPDT_NO, STEP_UPDT_NO, MFG_BOM_CHG, CA_ID, NODE_ID, CA_RESOLN_ID, CA_REQUEST_ID, ORDER_ID, DISC_ID, DISC_LINE_NO, PLND_WORK_LOC, PLAN_TYPE,
TASK_TYPE, REV_STATUS, EXTERNAL_PLM_NO, EXTERNAL_ERP_NO, PLAN_NO, BOM_NO, SECURITY_GROUP, POSITION_FLAG,
SERIAL_FLAG, LOT_FLAG,TEXT_TYPE, DISPLAY_SEQUENCE, INST_TYPE, COMM_ALRT, SEC_FLAG,PLANNED_ACTION_ALRT, STDOPER_OBJECT_ID,OPERATION_OVERLAP_FLAG,PLAN_LOCATION_ID,EXTERNAL_PLAN_REV,SOURCE, ASSIGNED_TO_USERID
,SCOPE_PLAN_ID, SCOPE_PLAN_VERSION, SCOPE_PLAN_REVISION, SCOPE_PLAN_ALTERATIONS, SCOPE_OPER_NO, SCOPE_OPER_KEY, SCOPE_OPER_UPDT_NO, SCOPE_STEP_NO, UCF_COMM_FLAG3
FROM (
SELECT INSTRUCTIONS_TYPE AS INST_TYPE, CASE WHEN INSTRUCTIONS_TYPE LIKE ''MRO%'' THEN ''Y'' ELSE ''N'' END AS MRO_FLAG, CASE WHEN INSTRUCTIONS_TYPE LIKE ''MRO%'' THEN 2 ELSE 1 END AS INSTRUCTIONS_TYPE, PART_NO, OPER_NO,
(CASE STEP_NO WHEN ''...'' THEN (CASE WHEN TEXT_TYPE=''PLANNING'' THEN ''FOOTER'' ELSE ''HEADER'' END) ELSE STEP_NO END) AS STEP_NO,
LOW_NAV_LVL, V.PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, PART_CHG, ITEM_TYPE, ITEM_SUBTYPE, V.PROGRAM, V.PROGRAM AS PLND_PROGRAM ,
V.OPER_KEY, STEP_KEY, PLAN_UPDT_NO, V.OPER_UPDT_NO, STEP_UPDT_NO, V.MFG_BOM_CHG, CA_ID, NODE_ID, CA_RESOLN_ID, CA_REQUEST_ID, ORDER_ID, DISC_ID, DISC_LINE_NO,
CASE WHEN OPER_PLND_WORK_LOC IS NOT NULL THEN OPER_PLND_WORK_LOC ELSE PLND_WORK_LOC END AS PLND_WORK_LOC, V.PLAN_TYPE,
P.TASK_TYPE, REV_STATUS, PLAN_EXTERNAL_PLM_NO AS EXTERNAL_PLM_NO, PLAN_EXTERNAL_ERP_NO AS EXTERNAL_ERP_NO,PLAN_NO,
V.BOM_NO, V.SECURITY_GROUP, ''N'' AS POSITION_FLAG, (CASE WHEN SEQ_STEPS_FLAG = ''Y'' THEN EXE_ORDER END) AS STEP_SEQ_ORDER_BY, V.SERIAL_FLAG, V.LOT_FLAG,TEXT_TYPE
, V.DISPLAY_SEQUENCE, D.COMM_ALRT, D.SEC_FLAG,D.PLANNED_ACTION_ALRT, V.STDOPER_OBJECT_ID, V.OPERATION_OVERLAP_FLAG,V.BOM_ID,
PLND_LOCATION_ID AS PLAN_LOCATION_ID,COALESCE(V.EXTERNAL_PLAN_REV,''N/A'') AS EXTERNAL_PLAN_REV,V.SOURCE,
(SELECT MT.ASSIGNED_TO_USERID FROM SFFND_PLG_TASK PT, SFFND_TASK MT WHERE PT.PLAN_ID = V.PLAN_ID AND PT.PLAN_VERSION = V.PLAN_VERSION AND PT.PLAN_REVISION = V.PLAN_REVISION
       AND PT.PLAN_ALTERATIONS = V.PLAN_ALTERATIONS AND PT.TASK_ID = MT.TASK_ID AND MT.STATUS IN (''ACTIVE'',''IN QUEUE'') AND ROWNUM =1) AS ASSIGNED_TO_USERID
,V.PLAN_ID AS SCOPE_PLAN_ID, PLAN_VERSION AS SCOPE_PLAN_VERSION, PLAN_REVISION AS SCOPE_PLAN_REVISION, PLAN_ALTERATIONS AS SCOPE_PLAN_ALTERATIONS, OPER_NO AS SCOPE_OPER_NO, V.OPER_KEY AS SCOPE_OPER_KEY, V.OPER_UPDT_NO AS SCOPE_OPER_UPDT_NO, (CASE STEP_NO WHEN ''...'' THEN (CASE WHEN TEXT_TYPE=''PLANNING'' THEN ''FOOTER'' ELSE ''HEADER'' END) ELSE STEP_NO END) AS SCOPE_STEP_NO,
PWUST_GetRTCFlag(V.PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS) as UCF_COMM_FLAG3
FROM SFPL_SCOPE_V V, SFFND_DOC_TYPE_DEF P, SFPL_MFG_BOM_REV M, SFPL_OPERATION_TEXT T, table(SFMFG.SFPL_ALERT_INFO_TAB_GET(:PLAN_ID,:PLAN_VERSION,:PLAN_REVISION,:PLAN_ALTERATIONS)) D
WHERE V.PLAN_ID = :PLAN_ID
AND PLAN_VERSION = :PLAN_VERSION
AND PLAN_REVISION = :PLAN_REVISION
AND PLAN_ALTERATIONS = :PLAN_ALTERATIONS
AND V.DOC_TYPE = P.DOC_TYPE
AND V.PLAN_TYPE = P.DOC_SUB_TYPE
AND V.WORK_FLOW = P.WORK_FLOW
AND NVL(V.BOM_ID,''X'') = M.BOM_ID(+)
AND V.PLAN_ID = T.PLAN_ID
AND V.OPER_KEY = T.OPER_KEY
AND V.OPER_UPDT_NO = T.OPER_UPDT_NO
AND T.TEXT_TYPE IN (''HEADER_PLANNING'',''PLANNING'')
AND (STEP_NO = ''...'' OR (STEP_NO != ''...'' AND T.TEXT_TYPE = ''PLANNING''))
)
WHERE 1=1 /*+ @Filter */
ORDER BY PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, SFMFG.SFDB_LPAD_VARCHAR(OPER_NO, 10, ''0''),
CASE WHEN STEP_NO != ''FOOTER'' THEN STEP_SEQ_ORDER_BY END,
CASE STEP_NO WHEN ''HEADER'' THEN '' '' WHEN ''FOOTER'' THEN CHR(''254'') ELSE SFMFG.SFDB_LPAD_VARCHAR(STEP_NO, 10, ''0'') END';
begin
begin
  insert into sfcore_sql_lib(sql_id,sql_id_displ,updt_userid,time_stamp,read_only,datasource,stype,description,sql_text)
    values(v_sql_id,v_sql_id_displ,user,sysdate,v_read_only,v_datasource,v_stype,v_description,v_sql_text);
  commit;
exception when dup_val_on_index then
  begin
    update sfcore_sql_lib
    set sql_text=v_sql_text,updt_userid=user,time_stamp=sysdate,sql_id_displ = v_sql_id_displ,
read_only=v_read_only,datasource=v_datasource,stype=v_stype,
description=v_description
    where sql_id=v_sql_id;
    commit;
  exception when others then
  	 sffnd_show_execution_message('DML',v_sql_id_displ, SQLCODE,SQLERRM,' update sfcore_sql_lib ');
  end;
when others then
  sffnd_show_execution_message('DML',v_sql_id_displ, SQLCODE,SQLERRM,' insert into sfcore_sql_lib ');
end;
begin
 if v_folder_id is not null then
  insert into sfcore_sql_lib_folder(sql_id,folder_id,updt_userid,time_stamp)
  values(v_sql_id,v_folder_id,user,sysdate);
  commit;
 end if;
exception when others then 
 sffnd_show_execution_message('DML',v_sql_id_displ, SQLCODE,SQLERRM,' insert into sfcore_sql_lib_folder ');
end;
end;
/

set define on

