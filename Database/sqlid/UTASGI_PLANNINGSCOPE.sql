set define off
declare
v_folder_id varchar2(40) :='FOUNDATION';
v_sql_id varchar2(85) :='UTASGI_PLANNINGSCOPE';
v_sql_id_displ varchar2(85) :='UTASGI_PlanningScope';
v_read_only number :='';
v_datasource varchar2(32) :='';
v_stype varchar2(32) :='SFPL';
v_site varchar2(10) :='UTASGI';
v_description varchar2(200) :='Cloned UTASGI Planning Scope';
v_sql_text varchar2(4000) :='SELECT MRO_FLAG, INSTRUCTIONS_TYPE, PART_NO, OPER_NO, STEP_NO, LOW_NAV_LVL, PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, PART_CHG, ITEM_TYPE, ITEM_SUBTYPE, PROGRAM,
OPER_KEY, STEP_KEY, PLAN_UPDT_NO, OPER_UPDT_NO, STEP_UPDT_NO, MFG_BOM_CHG, CA_ID, NODE_ID, CA_RESOLN_ID, CA_REQUEST_ID, ORDER_ID, DISC_ID, DISC_LINE_NO, PLND_WORK_LOC, PLAN_TYPE,
TASK_TYPE, REV_STATUS, EXTERNAL_PLM_NO, EXTERNAL_ERP_NO, CHG_AUTH_TYPE, CHG_AUTH_NUM, CHG_AUTH_NOTES, PLAN_NO, BOM_NO, SECURITY_GROUP, POSITION_FLAG,
SERIAL_FLAG, LOT_FLAG,TEXT_TYPE, DISPLAY_SEQUENCE, INST_TYPE, LST_OBJ_ALRT, COMM_ALRT, SEC_FLAG, STDOPER_OBJECT_ID, UCF_PLAN_FLAG4
FROM (
SELECT INSTRUCTIONS_TYPE AS INST_TYPE, CASE WHEN INSTRUCTIONS_TYPE LIKE ''MRO%'' THEN ''Y'' ELSE ''N'' END AS MRO_FLAG, CASE WHEN INSTRUCTIONS_TYPE LIKE ''MRO%'' THEN 2 ELSE 1 END AS INSTRUCTIONS_TYPE, V.PART_NO, OPER_NO,
(CASE STEP_NO WHEN ''...'' THEN (CASE WHEN TEXT_TYPE=''PLANNING'' THEN ''FOOTER'' ELSE ''HEADER'' END) ELSE STEP_NO END) AS STEP_NO,
V.LOW_NAV_LVL, V.PLAN_ID, V.PLAN_VERSION, V.PLAN_REVISION, V.PLAN_ALTERATIONS, V.PART_CHG, V.ITEM_TYPE, V.ITEM_SUBTYPE, V.PROGRAM,
V.OPER_KEY, STEP_KEY, V.PLAN_UPDT_NO, V.OPER_UPDT_NO, STEP_UPDT_NO, V.MFG_BOM_CHG, CA_ID, NODE_ID, CA_RESOLN_ID, CA_REQUEST_ID, ORDER_ID, DISC_ID, DISC_LINE_NO,
CASE WHEN OPER_PLND_WORK_LOC IS NOT NULL THEN OPER_PLND_WORK_LOC ELSE V.PLND_WORK_LOC END AS PLND_WORK_LOC, V.PLAN_TYPE,
P.TASK_TYPE, V.REV_STATUS, PLAN_EXTERNAL_PLM_NO AS EXTERNAL_PLM_NO, PLAN_EXTERNAL_ERP_NO AS EXTERNAL_ERP_NO, V.CHG_AUTH_TYPE, V.CHG_AUTH_NUM, V.CHG_AUTH_NOTES, V.PLAN_NO,
V.BOM_NO, V.SECURITY_GROUP, (CASE WHEN POSITION_FLAG IS NULL THEN ''N'' ELSE POSITION_FLAG END) AS POSITION_FLAG, (CASE WHEN SEQ_STEPS_FLAG = ''Y'' THEN EXE_ORDER END) AS STEP_SEQ_ORDER_BY, V.SERIAL_FLAG, V.LOT_FLAG,TEXT_TYPE
, V.DISPLAY_SEQUENCE, D.LST_OBJ_ALRT, D.COMM_ALRT, D.SEC_FLAG, V.STDOPER_OBJECT_ID, PLAN_V.UCF_PLAN_FLAG4
FROM SFPL_SCOPE_V V, SFFND_DOC_TYPE_DEF P, SFPL_MFG_BOM_REV M, SFPL_OPERATION_TEXT T, table(SFMFG.UTASGI_ALERT_INFO_TAB_GET(:PLAN_ID,:PLAN_VERSION,:PLAN_REVISION,:PLAN_ALTERATIONS)) D, SFPL_PLAN_V PLAN_V
WHERE V.PLAN_ID = :PLAN_ID
AND V.PLAN_VERSION = :PLAN_VERSION
AND V.PLAN_REVISION = :PLAN_REVISION
AND V.PLAN_ALTERATIONS = :PLAN_ALTERATIONS
AND V.DOC_TYPE = P.DOC_TYPE
AND V.PLAN_TYPE = P.DOC_SUB_TYPE
AND V.WORK_FLOW = P.WORK_FLOW
AND NVL(V.BOM_NO,''X'') = M.BOM_NO(+)
AND NVL(V.MFG_BOM_CHG,''X'') = M.MFG_BOM_CHG(+)
AND V.PLAN_ID = T.PLAN_ID
AND V.OPER_KEY = T.OPER_KEY
AND V.OPER_UPDT_NO = T.OPER_UPDT_NO
AND T.TEXT_TYPE IN (''HEADER_PLANNING'',''PLANNING'')
AND (STEP_NO = ''...'' OR (STEP_NO != ''...'' AND T.TEXT_TYPE = ''PLANNING''))
AND V.PLAN_ID = PLAN_V.PLAN_ID
AND V.PLAN_VERSION = PLAN_V.PLAN_VERSION
AND V.PLAN_REVISION = PLAN_V.PLAN_REVISION
AND V.PLAN_ALTERATIONS = PLAN_V.PLAN_ALTERATIONS
)
ORDER BY PLAN_ID, PLAN_VERSION, PLAN_REVISION, PLAN_ALTERATIONS, SFMFG.SFDB_LPAD_VARCHAR(OPER_NO, 10, ''0''),
CASE WHEN STEP_NO != ''FOOTER'' THEN STEP_SEQ_ORDER_BY END,
CASE STEP_NO WHEN ''HEADER'' THEN '' '' WHEN ''FOOTER'' THEN CHR(''254'') ELSE SFMFG.SFDB_LPAD_VARCHAR(STEP_NO, 10, ''0'') END';
begin
begin
insert into sfcore_sql_lib(sql_id,sql_id_displ,updt_userid,time_stamp,read_only,datasource,stype, description,sql_text)
    values(v_sql_id,v_sql_id_displ,user,sysdate,v_read_only,v_datasource,v_stype, v_description,replace(v_sql_text,chr(10),chr(13)||chr(10)));
commit;
exception when dup_val_on_index then
  update sfcore_sql_lib
  set sql_text=replace(v_sql_text,chr(10),chr(13)||chr(10)),updt_userid=user,time_stamp=sysdate,
read_only=v_read_only,datasource=v_datasource,stype=v_stype,  
description=v_description
  where sql_id=v_sql_id;
  commit;
end;
begin
if v_folder_id is not null then
insert into sfcore_sql_lib_folder(sql_id,folder_id,updt_userid,time_stamp)
values(v_sql_id,v_folder_id,user,sysdate);
commit;
end if;
exception when others then null;
end;
end;
/

set define on

