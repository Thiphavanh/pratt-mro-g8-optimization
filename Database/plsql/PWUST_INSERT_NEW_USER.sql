CREATE OR REPLACE PROCEDURE PWUST_INSERT_NEW_USER AS
  -- ********************************************************************************
  -- Date Created:   2018-08-07
  -- Created By:     Nazaire Gnassounou
  -- DER:            SMRO_USR_206
  -- Description:    Load new users, assign them a security group and role(s)
  --
  -- Modification History:
  -- DATE          AUTHOR          DEFECT   DESCRIPTION
  -- 2018-08-07    N. Gnassounou   --       Initial Release
  -- 2019-01-18    R. Cannon       --       Insert statements modified to match Java
  -- *********************************************************************************

  V_ID_CNT         NUMBER(1);
  V_LOCATION_ID    SFFND_WORK_LOC_DEF.LOCATION_ID%TYPE;
  V_SECURITY_GROUP UTASGI_USER_SEC_GRP_XREF.SECURITY_GROUP%TYPE;

  CURSOR C_USERS IS
    SELECT USERID, LAST_NAME, FIRST_NAME, FULL_NAME, EMAIL_ADDRESS, WORK_LOC
      FROM PWUST_INSERT_USER_TEMP;

  --Delimit role column by commas (ignore spaces surrounding commas if present)
  CURSOR C_ROLES(V_USERID VARCHAR) IS
    SELECT REGEXP_SUBSTR(T.ROLES, '[^, ]+', 1, LEVEL) AS ROLES
      FROM PWUST_INSERT_USER_TEMP T
     WHERE T.USERID = V_USERID
    CONNECT BY REGEXP_SUBSTR(T.ROLES, '[^, ]+', 1, LEVEL) IS NOT NULL;

BEGIN

  FOR U IN C_USERS
  LOOP
  
    /********************
         INSERT USER
    *********************/
    --Check if user already exists
    SELECT COUNT(*) INTO V_ID_CNT FROM SFCORE_USER T WHERE T.USERID = U.USERID;
  
    IF V_ID_CNT > 0 THEN
      SFCORE_RAISE_ERROR('User ' || U.USERID || ' already exists');
    ELSE
      BEGIN
        SFCORE_CREATE_USER('SFMFG', U.USERID, NULL, NULL, 'NORMAL');
      EXCEPTION
        WHEN OTHERS THEN
          SFCORE_RAISE_ERROR('User ' || U.USERID || ' failed to insert into SFCORE_USER');
      END;
    END IF;
  
    --Validate home work location  
    BEGIN
      SELECT LOCATION_ID
        INTO V_LOCATION_ID
        FROM SFFND_WORK_LOC_DEF T
       WHERE T.WORK_LOC = U.WORK_LOC;
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('Invalid work location for user ' || U.USERID);
    END;
  
    BEGIN
      INSERT INTO SFFND_USER
        (USERID, UPDT_USERID, TIME_STAMP, LAST_ACTION, LAST_NAME, FIRST_NAME, MIDDLE_NAME,
         FULL_NAME, NAME_SUFFIX, LOCATION_ID, DEPARTMENT_ID, CENTER_ID, SHIFT, PAYROLL_ID,
         OBSOLETE_RECORD_FLAG, UCF_USER_VCH1, UCF_USER_VCH2, UCF_USER_VCH3, UCF_USER_VCH4,
         USER_CLASS, EMAIL_ADDRESS, USER_TYPE, LABOR_TYPE, UCF_USER_VCH5, UCF_USER_VCH6,
         UCF_USER_VCH7, UCF_USER_VCH8, UCF_USER_VCH9, UCF_USER_VCH10, UCF_USER_VCH11,
         UCF_USER_VCH12, UCF_USER_VCH13, UCF_USER_VCH14, UCF_USER_VCH15, UCF_USER_NUM1,
         UCF_USER_NUM2, UCF_USER_NUM3, UCF_USER_NUM4, UCF_USER_NUM5, UCF_USER_DATE1,
         UCF_USER_DATE2, UCF_USER_DATE3, UCF_USER_DATE4, UCF_USER_DATE5, UCF_USER_FLAG1,
         UCF_USER_FLAG2, UCF_USER_FLAG3, UCF_USER_FLAG4, UCF_USER_FLAG5, UCF_USER_VCH255_1,
         UCF_USER_VCH255_2, UCF_USER_VCH255_3, UCF_USER_VCH4000_1, UCF_USER_VCH4000_2,
         INCLUDE_ALL_SUPPLIERS, USER_DEFINITION, LAST_EYE_EXAM_DATE, MI_USER_FLAG)
      VALUES
        (U.USERID, 'SFMFG', SYSDATE, 'INSERTED', U.LAST_NAME, U.FIRST_NAME, NULL /*MIDDLE_NAME*/,
         U.FULL_NAME, NULL /*NAME_SUFFIX*/, V_LOCATION_ID, NULL /*DEPARTMENT_ID*/,
         NULL /*CENTER_ID*/, NULL /*SHIFT*/, NULL /*PAYROLL_ID*/, 'N' /*OBSOLETE_RECORD_FLAG*/,
         NULL /*UCF_USER_VCH1*/, NULL /*UCF_USER_VCH2*/, NULL /*UCF_USER_VCH3*/,
         NULL /*UCF_USER_VCH4*/, NULL /*USER_CLASS*/, U.EMAIL_ADDRESS, '@IBASET' /*USER_TYPE*/,
         NULL /*LABOR_TYPE*/, NULL /*UCF_USER_VCH5*/, NULL /*UCF_USER_VCH6*/,
         NULL /*UCF_USER_VCH7*/, NULL /*UCF_USER_VCH8*/, NULL /*UCF_USER_VCH9*/,
         NULL /*UCF_USER_VCH10*/, NULL /*UCF_USER_VCH11*/, NULL /*UCF_USER_VCH12*/,
         NULL /*UCF_USER_VCH13*/, NULL /*UCF_USER_VCH14*/, NULL /*UCF_USER_VCH15*/,
         NULL /*UCF_USER_NUM1*/, NULL /*UCF_USER_NUM2*/, NULL /*UCF_USER_NUM3*/,
         NULL /*UCF_USER_NUM4*/, NULL /*UCF_USER_NUM5*/, NULL /*UCF_USER_DATE1 (Password Last
         Changed)*/, NULL /*UCF_USER_DATE2*/, NULL /*UCF_USER_DATE3*/, NULL /*UCF_USER_DATE4*/,
         NULL /*UCF_USER_DATE5*/, NULL /*UCF_USER_FLAG1*/, NULL /*UCF_USER_FLAG2 (User No Labor)*/,
         NULL /*UCF_USER_FLAG3*/, NULL /*UCF_USER_FLAG4*/, NULL /*UCF_USER_FLAG5*/,
         NULL /*UCF_USER_VCH255_1*/, NULL /*UCF_USER_VCH255_2*/, NULL /*UCF_USER_VCH255_3*/,
         NULL /*UCF_USER_VCH4000_1*/, NULL /*UCF_USER_VCH4000_2*/, 'N' /*INCLUDE_ALL_SUPPLIERS*/,
         'User' /*USER_DEFINITION*/, NULL /*LAST_EYE_EXAM_DATE*/, 'N' /*MI_USER_FLAG*/);
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('User ' || U.USERID || ' failed to insert into SFFND_USER');
    END;
  
    BEGIN
      INSERT INTO SFFND_USER_WORK_CENTERS
        (USERID, ASGND_LOCATION_ID, ASGND_DEPARTMENT_ID, ASGND_CENTER_ID, SHIFT,
         UPDT_USERID, TIME_STAMP, LAST_ACTION)
      VALUES
        (U.USERID, V_LOCATION_ID, NULL, NULL, NULL, 'SFMFG', SYSDATE, 'INSERTED');
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('User ' || U.USERID ||
                           ' failed to insert into SFFND_USER_WORK_CENTERS');
    END;
  
    BEGIN
      INSERT INTO SFSQA_USER_SUPPLIERS
        (USERID, SUPPLIER_CODE, UPDT_USERID, TIME_STAMP, LAST_ACTION,
         UCF_USER_SUPPLIER_VCH1, UCF_USER_SUPPLIER_VCH2, UCF_USER_SUPPLIER_VCH3,
         UCF_USER_SUPPLIER_VCH4, UCF_USER_SUPPLIER_VCH5, UCF_USER_SUPPLIER_VCH6,
         UCF_USER_SUPPLIER_VCH7, UCF_USER_SUPPLIER_VCH8, UCF_USER_SUPPLIER_VCH9,
         UCF_USER_SUPPLIER_VCH10, UCF_USER_SUPPLIER_VCH11, UCF_USER_SUPPLIER_VCH12,
         UCF_USER_SUPPLIER_VCH13, UCF_USER_SUPPLIER_VCH14, UCF_USER_SUPPLIER_VCH15,
         UCF_USER_SUPPLIER_NUM1, UCF_USER_SUPPLIER_NUM2, UCF_USER_SUPPLIER_NUM3,
         UCF_USER_SUPPLIER_NUM4, UCF_USER_SUPPLIER_NUM5, UCF_USER_SUPPLIER_DATE1,
         UCF_USER_SUPPLIER_DATE2, UCF_USER_SUPPLIER_DATE3, UCF_USER_SUPPLIER_DATE4,
         UCF_USER_SUPPLIER_DATE5, UCF_USER_SUPPLIER_FLAG1, UCF_USER_SUPPLIER_FLAG2,
         UCF_USER_SUPPLIER_FLAG3, UCF_USER_SUPPLIER_FLAG4, UCF_USER_SUPPLIER_FLAG5,
         UCF_USER_SUPPLIER_VCH255_1, UCF_USER_SUPPLIER_VCH255_2,
         UCF_USER_SUPPLIER_VCH255_3, UCF_USER_SUPPLIER_VCH4000_1,
         UCF_USER_SUPPLIER_VCH4000_2)
      VALUES
        (U.USERID, 'N/A', 'SFMFG', SYSDATE, 'INSERTED', NULL, NULL, NULL, NULL, NULL,
         NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
         NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
         NULL, NULL, NULL, NULL);
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('User ' || U.USERID ||
                           ' failed to insert into SFSQA_USER_SUPPLIERS');
    END;
  
    /**********************************
         INSERT USER SECURITY GROUP
    ***********************************/
    --Derive security group from home work location
    BEGIN
      SELECT SECURITY_GROUP
        INTO V_SECURITY_GROUP
        FROM UTASGI_USER_SEC_GRP_XREF
       WHERE HR_LOC = U.WORK_LOC;
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('Work location for user ' || U.USERID ||
                           ' not found in UTASGI_USER_SEC_GRP_XREF');
    END;
  
    BEGIN
      INSERT INTO SFFND_USER_SEC_GRP
        (USERID, SECURITY_GROUP, UPDT_USERID, TIME_STAMP, LAST_ACTION,
         EFFECTIVE_START_DATE, EFFECTIVE_END_DATE)
      VALUES
        (U.USERID, V_SECURITY_GROUP, 'SFMFG', SYSDATE, 'INSERTED', TRUNC(SYSDATE),
         TO_DATE('01/01/9999', 'MM/DD/YYYY'));
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('Security group ' || V_SECURITY_GROUP || ' for user ' ||
                           U.USERID || ' failed to insert into SFFND_USER_SEC_GRP');
    END;
  
    /****************************
         INSERT USER LICENSE
    *****************************/
    /*2019-01-18 Confirmed to be valid when using application.
                 Functionality disabled per Pratt's request*/
    /*BEGIN
      INSERT INTO SFFND_LICENSE_USERS
        (LICENSE_NAME, USERID, UCF_SFFND_LICENSE_USER_VCH1, UCF_SFFND_LICENSE_USER_VCH2,
         UCF_SFFND_LICENSE_USER_VCH3, UCF_SFFND_LICENSE_USER_VCH4,
         UCF_SFFND_LICENSE_USER_VCH5, UCF_SFFND_LICENSE_USER_VCH6,
         UCF_SFFND_LICENSE_USER_VCH7, UCF_SFFND_LICENSE_USER_VCH8,
         UCF_SFFND_LICENSE_USER_VCH9, UCF_SFFND_LICENSE_USER_VCH10,
         UCF_SFFND_LICENSE_USER_VCH11, UCF_SFFND_LICENSE_USER_VCH12,
         UCF_SFFND_LICENSE_USER_VCH13, UCF_SFFND_LICENSE_USER_VCH14,
         UCF_SFFND_LICENSE_USER_VCH15, UCF_SFFND_LICENSE_USER_NUM1,
         UCF_SFFND_LICENSE_USER_NUM2, UCF_SFFND_LICENSE_USER_NUM3,
         UCF_SFFND_LICENSE_USER_NUM4, UCF_SFFND_LICENSE_USER_NUM5,
         UCF_SFFND_LICENSE_USER_DATE1, UCF_SFFND_LICENSE_USER_DATE2,
         UCF_SFFND_LICENSE_USER_DATE3, UCF_SFFND_LICENSE_USER_DATE4,
         UCF_SFFND_LICENSE_USER_DATE5, UCF_SFFND_LICENSE_USER_FLAG1,
         UCF_SFFND_LICENSE_USER_FLAG2, UCF_SFFND_LICENSE_USER_FLAG3,
         UCF_SFFND_LICENSE_USER_FLAG4, UCF_SFFND_LICENSE_USER_FLAG5, UPDT_USERID,
         TIME_STAMP, LAST_ACTION)
      VALUES
        ('FULL USER', U.USERID, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
         NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
         NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'SFMFG', SYSDATE, 'INSERTED');
    EXCEPTION
      WHEN OTHERS THEN
        SFCORE_RAISE_ERROR('Failed to assign user ' || U.USERID ||
                           ' license "FULL USER" in SFFND_LICENSE_USERS');
    END;*/
  
    /****************************
         INSERT USER ROLE(S)
    *****************************/
    FOR R IN C_ROLES(U.USERID)
    LOOP
      BEGIN
        DBMS_OUTPUT.PUT_LINE('Adding role ' || R.ROLES || ' to user ' || U.USERID);
        SFCORE_USER_ASSIGNROLE('SFMFG', U.USERID, R.ROLES, 'GRANT', 'Y', 'N');
      EXCEPTION
        WHEN OTHERS THEN
          SFCORE_RAISE_ERROR('Role ' || R.ROLES || ' for user ' || U.USERID ||
                             ' failed to insert into SFCORE_USER_ROLES');
      END;
    END LOOP;
  
  END LOOP; --End "user insert"

  COMMIT;

END PWUST_INSERT_NEW_USER;
/

GRANT EXECUTE ON PWUST_INSERT_NEW_USER TO SF$CONNECTION_POOL;
